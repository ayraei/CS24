1a) How many times is the value of counter printed?

The value of counter is printed 10 times. When the program is run, counter is 0.
Then, in the for-loop, the process is forked, and both processes increment
counter to 1. Each one prints that value of counter (2 prints), then enter
another loop iteration, in which they fork (now 4 processes) and each print
the value of counter (4 prints). Lastly, each process exits the loop and
each prints the final value of counter (4 prints). This gives us our total of
10 prints.

1b) What is the first value of counter printed?

The value of counter printed in the first line is 1. When the process forks
for the first time, both processes then proceed to increment counter from 0 to
1, and print the value of counter. Either of these prints must be the first one,
so 1 is the first value of counter to be printed must be 1.

1c) What is the last value of counter printed?

The value of counter printed in the last line is 2. When any of the instances
of the program is finished, counter must have a value of 2. There is a print
statement right before the main function returns, so the last print must be
a 2.

2) What is the output of the program, and is it the same every time?

The output is
"
counter = 1
counter = 3
counter = 3
"

and it is always the same.

The first line "counter = 1" is printed because handler1 is signalled first,
which increments counter and prints it. The next two lines come from either
handler2 being called (which adds 3 to counter and prints it) or printing
counter after adding 2, from the child or parent, respectively.

3) Which outputs can be generated by the program?

01342

0 must be the first digit. When fork() is called, the parent process will
continue first, so 1 will be printed first. Then the child process will hit the
same if-else block but print 3 instead. Since the parent's section of the
if-else block has a wait() call, the child will then continue and increment
counter, then print 4. Lastly, the parent will be unblocked and increment
its own counter, printing 2.
